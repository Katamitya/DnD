import React, { useState } from 'react'
import DiceRoller from './DiceRoller'
import MapViewer from './MapViewer'
import Settings from './Settings'

const GameControls = ({ 
  gridSize, 
  cellSize, 
  onGridSizeChange, 
  onCellSizeChange,
  onOpenDiceRoller,
  onOpenDiceLog,
  onOpenMapManager,
  currentPlayer,
  maps = [],
  onMapSelect,
  selectedMap
}) => {
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('=== GAME CONTROLS DEBUG ===')
  console.log('Maps received in GameControls:', maps)
  console.log('Current player:', currentPlayer)
  const [isMapViewerOpen, setIsMapViewerOpen] = useState(false)
  const [isSettingsOpen, setIsSettingsOpen] = useState(false)
  const gridSizeOptions = [8, 12, 15, 18, 20, 25]
  const cellSizeOptions = [30, 35, 40, 45, 50, 60]

  return (
    <div className="bg-gray-800 border-b border-gray-700 p-4">
              <div className="flex items-center justify-between">
          <div className="flex items-center space-x-6">
            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ */}
            {currentPlayer?.isMaster && (
              <>
                <div className="flex items-center space-x-3">
                  <label className="text-sm font-medium text-gray-300">
                    –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏:
                  </label>
                  <select
                    value={gridSize}
                    onChange={(e) => onGridSizeChange(parseInt(e.target.value))}
                    className="input-field text-sm py-1 px-2"
                  >
                    {gridSizeOptions.map(size => (
                      <option key={size} value={size}>
                        {size}√ó{size}
                      </option>
                    ))}
                  </select>
                </div>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —è—á–µ–π–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ */}
                <div className="flex items-center space-x-3">
                  <label className="text-sm font-medium text-gray-300">
                    –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏:
                  </label>
                  <select
                    value={cellSize}
                    onChange={(e) => onCellSizeChange(parseInt(e.target.value))}
                    className="input-field text-sm py-1 px-2"
                  >
                    {cellSizeOptions.map(size => (
                      <option key={size} value={size}>
                        {size}px
                      </option>
                    ))}
                  </select>
                </div>
              </>
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ */}
            <div className="text-sm text-gray-400">
              –ü–æ–ª–µ: {gridSize}√ó{gridSize} —è—á–µ–µ–∫
            </div>
          </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex items-center space-x-3">
          <button 
            className="btn-secondary text-sm py-1 px-3"
            onClick={onOpenDiceRoller}
          >
            <span className="flex items-center space-x-1">
              <span>üé≤</span>
              <span>–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏</span>
            </span>
          </button>
          
          <button 
            className="btn-secondary text-sm py-1 px-3"
            onClick={onOpenDiceLog}
          >
            <span className="flex items-center space-x-1">
              <span>üìã</span>
              <span>–ò—Å—Ç–æ—Ä–∏—è</span>
            </span>
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ */}
          {currentPlayer?.isMaster && (
            <button 
              onClick={onOpenMapManager}
              className="btn-secondary text-sm py-1 px-3 bg-dnd-purple hover:bg-purple-600"
            >
              <span className="flex items-center space-x-1">
                <span>üó∫Ô∏è</span>
                <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏</span>
              </span>
            </button>
          )}
          
          <button 
            className="btn-secondary text-sm py-1 px-3"
            onClick={() => setIsMapViewerOpen(true)}
          >
            <span className="flex items-center space-x-1">
              <span>üó∫Ô∏è</span>
              <span>–ö–∞—Ä—Ç–∞</span>
            </span>
          </button>
          
          <button 
            className="btn-secondary text-sm py-1 px-3"
            onClick={() => setIsSettingsOpen(true)}
          >
            <span className="flex items-center space-x-1">
              <span>‚öôÔ∏è</span>
              <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
            </span>
          </button>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mt-3 pt-3 border-t border-gray-700">
        <div className="flex items-center justify-between text-xs text-gray-400">
          <div className="flex items-center space-x-4">
            <span>‚Ä¢ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —Ñ–∏—à–∫—É –º—ã—à—å—é –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</span>
            <span>‚Ä¢ –§–∏—à–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —è—á–µ–π–∫–∞–º —Å–µ—Ç–∫–∏</span>
            <span>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <span className="w-2 h-2 bg-dnd-gold rounded-full"></span>
            <span>–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫</span>
          </div>
        </div>
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã */}
      <MapViewer 
        isOpen={isMapViewerOpen}
        onClose={() => setIsMapViewerOpen(false)}
        maps={maps}
        currentPlayer={currentPlayer}
        onMapSelect={onMapSelect}
        selectedMap={selectedMap}
      />
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <Settings 
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
      />
    </div>
  )
}

export default GameControls
