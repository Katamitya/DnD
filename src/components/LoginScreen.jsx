import React, { useState, useEffect } from 'react'
import { getSessions, addCharacterToSession, getSession } from '../utils/sessionManager'
import CharacterCreationModal from './CharacterCreationModal'

const LoginScreen = ({ onLogin, currentSession, onBackToSessions }) => {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [sessions, setSessions] = useState([])
  const [selectedSession, setSelectedSession] = useState(null)
  const [selectedCharacter, setSelectedCharacter] = useState(null)
  const [loginMode, setLoginMode] = useState('new') // 'new' –∏–ª–∏ 'existing'
  const [isCharacterCreationOpen, setIsCharacterCreationOpen] = useState(false)

  useEffect(() => {
    console.log('=== LOGINSCREEN USEEFFECT ===')
    console.log('currentSession:', currentSession)
    
    if (currentSession) {
      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      console.log('Using currentSession:', currentSession.name)
      setSelectedSession(currentSession)
      setSessions([currentSession])
    } else {
      // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
      const existingSessions = getSessions()
      console.log('Loaded sessions:', existingSessions.length)
      setSessions(existingSessions)
    }
  }, [currentSession])

  const handleSubmit = (e) => {
    e.preventDefault()
    
    if (loginMode === 'existing' && selectedCharacter) {
      // –í—Ö–æ–¥ –∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      setIsSubmitting(true)
      setTimeout(() => {
        onLogin(selectedCharacter.nickname, false, selectedSession, selectedCharacter)
        setIsSubmitting(false)
      }, 500)
    }
  }

    const handleCharacterCreate = (character) => {
    console.log('=== HANDLE CHARACTER CREATE START ===')
    console.log('Character data:', character)
    
    try {
      // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (!character || !character.name) {
        console.error('Invalid character data')
        return
      }
      
      console.log('Character validation passed')
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
      const session = currentSession || selectedSession
      console.log('Session found:', session)
      
      if (!session || !session.id) {
        console.error('No valid session found')
        return
      }
      
      console.log('Adding character to session...')
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–µ—Å—Å–∏—é
      const success = addCharacterToSession(session.id, character)
      console.log('Add character result:', success)
      
      if (!success) {
        console.error('Failed to add character to session')
        return
      }
      
      console.log('Character added to session successfully')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
      const updatedSession = getSession(session.id)
      if (updatedSession) {
        console.log('Session updated successfully')
        console.log('Updated session:', updatedSession)
        console.log('Characters in updated session:', updatedSession.characters)
        console.log('Characters length:', updatedSession.characters.length)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        // currentSession - —ç—Ç–æ –ø—Ä–æ–ø—Å, –º—ã –Ω–µ –º–æ–∂–µ–º –µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º selectedSession
        setSelectedSession(updatedSession)
        console.log('selectedSession state updated')
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
        setSessions(prevSessions => {
          console.log('Previous sessions:', prevSessions)
          const index = prevSessions.findIndex(s => s.id === updatedSession.id)
          console.log('Session index in list:', index)
          
          if (index !== -1) {
            const newSessions = [...prevSessions]
            newSessions[index] = updatedSession
            console.log('Updated existing session in list')
            return newSessions
          } else {
            // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            console.log('Added new session to list')
            return [...prevSessions, updatedSession]
          }
        })
        
        console.log('Sessions state updated')
      } else {
        console.error('Failed to get updated session')
      }
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      setLoginMode('existing')
      setSelectedCharacter(character)
      
      console.log('Switched to existing character mode')
      console.log('Selected character:', character)
      
      // –ù–ï –≤—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É —Å—Ä–∞–∑—É - –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      console.log('Character created successfully, ready for selection')
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      setIsCharacterCreationOpen(false)
      
      console.log('=== HANDLE CHARACTER CREATE SUCCESS ===')
      
    } catch (error) {
      console.error('=== HANDLE CHARACTER CREATE ERROR ===')
      console.error('Error details:', error)
      console.error('Error stack:', error.stack)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
      <div className="max-w-md w-full space-y-8 p-8">
        <div className="text-center relative">
          {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–µ—Å—Å–∏—è–º */}
          {onBackToSessions && (
            <button
              onClick={onBackToSessions}
              className="absolute left-0 top-0 text-dnd-gold hover:text-white transition-colors"
              title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–µ—Å—Å–∏–∏"
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–µ—Å—Å–∏—è–º
            </button>
          )}
          
          <div className="mx-auto h-24 w-24 bg-gradient-to-r from-dnd-gold to-dnd-red rounded-full flex items-center justify-center mb-6">
            <span className="text-4xl font-fantasy text-white">‚öîÔ∏è</span>
          </div>
          <h2 className="text-4xl font-fantasy text-dnd-gold mb-2">
            DnD 5e
          </h2>
          <p className="text-xl text-gray-300 font-medieval">
            –í–æ–π–¥–∏ –≤ –º–∏—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
          </p>
          {currentSession && (
            <p className="text-sm text-dnd-gold mt-2">
              –°–µ—Å—Å–∏—è: {currentSession.name}
            </p>
          )}
        </div>
        
        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ –≤—Ö–æ–¥–∞ */}
        <div className="flex items-center justify-center space-x-4 mb-6">
          <button
            type="button"
            onClick={() => setLoginMode('new')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              loginMode === 'new'
                ? 'bg-dnd-gold text-gray-900'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            ‚ûï –ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
          </button>
          <button
            type="button"
            onClick={() => setLoginMode('existing')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              loginMode === 'existing'
                ? 'bg-dnd-gold text-gray-900'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            üë§ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂
          </button>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞ */}
        <div className="text-center mb-6">
          <button
            type="button"
            onClick={() => {
              if (sessions.length > 0) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏–∏, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ö–æ–¥–∏–º –∫–∞–∫ –º–∞—Å—Ç–µ—Ä
                const firstSession = sessions[0]
                console.log('=== MASTER QUICK LOGIN ===')
                console.log('Quick master login for session:', firstSession.name)
                
                setIsSubmitting(true)
                setTimeout(() => {
                  onLogin('–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã', true, firstSession, null)
                  setIsSubmitting(false)
                }, 500)
              } else {
                // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é!')
              }
            }}
            disabled={sessions.length === 0 || isSubmitting}
            className="bg-dnd-purple text-white px-6 py-3 rounded-lg font-medium transition-colors hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed border-2 border-dnd-gold"
          >
            {isSubmitting ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                –í—Ö–æ–¥...
              </span>
            ) : (
              'üßô‚Äç‚ôÇÔ∏è –í–æ–π—Ç–∏ –∫–∞–∫ –º–∞—Å—Ç–µ—Ä'
            )}
          </button>
          <p className="text-sm text-dnd-gold mt-2">
            –ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∞–º–∏, –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
          </p>
        </div>



        <div className="mt-8 space-y-6">
          {loginMode === 'new' ? (
            <>
              {/* –í—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
              {!currentSession && sessions.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é:
                  </label>
                  <select
                    value={selectedSession?.id || ''}
                    onChange={(e) => {
                      const session = sessions.find(s => s.id === e.target.value)
                      setSelectedSession(session)
                    }}
                    className="input-field w-full text-lg text-center"
                    required
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é...</option>
                    {sessions.map(session => (
                      <option key={session.id} value={session.id}>
                        {session.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
              <div className="text-center">
                <button
                  type="button"
                  onClick={() => setIsCharacterCreationOpen(true)}
                  disabled={!currentSession && !selectedSession}
                  className="btn-primary w-full text-lg py-3 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  üé≠ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                </button>
                {!currentSession && !selectedSession && (
                  <p className="text-sm text-gray-400 mt-2">
                    –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                  </p>
                )}
              </div>
            </>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-4">
              {/* –í—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
              {!currentSession && (
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é:
                  </label>
                  <select
                    value={selectedSession?.id || ''}
                    onChange={(e) => {
                      const session = sessions.find(s => s.id === e.target.value)
                      setSelectedSession(session)
                      setSelectedCharacter(null)
                    }}
                    className="input-field w-full text-lg text-center"
                    required
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é...</option>
                    {sessions.map(session => (
                      <option key={session.id} value={session.id}>
                        {session.name} ({session.characters.length} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)
                      </option>
                    ))}
                  </select>
                </div>
              )}
              
              {/* –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
              {(currentSession || selectedSession) && (
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
                  </label>
                  {(() => {
                    const session = currentSession || selectedSession
                    console.log('=== DROPDOWN RENDER ===')
                    console.log('Session for dropdown:', session)
                    console.log('Characters in session:', session.characters)
                    console.log('Characters length:', session.characters.length)
                    
                    return (
                      <select
                        value={selectedCharacter?.id || ''}
                        onChange={(e) => {
                          const character = session.characters.find(c => c.id === e.target.value)
                          console.log('Character selected:', character)
                          setSelectedCharacter(character)
                        }}
                        className="input-field w-full text-lg text-center"
                        required
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞... ({session.characters.length} –¥–æ—Å—Ç—É–ø–Ω–æ)</option>
                        {session.characters.map(character => (
                          <option key={character.id} value={character.id}>
                            {character.name} ({character.nickname})
                          </option>
                        ))}
                      </select>
                    )
                  })()}
                </div>
              )}
              
              <div>
                <button
                  type="submit"
                  disabled={!selectedCharacter || isSubmitting}
                  className="btn-primary w-full text-lg py-3 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSubmitting ? (
                    <span className="flex items-center justify-center">
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      –í—Ö–æ–¥...
                    </span>
                  ) : (
                    '–í–æ–π—Ç–∏ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
                  )}
                </button>
              </div>
            </form>
          )}
        </div>
        
        <div className="text-center text-sm text-gray-400">
          {loginMode === 'new' ? (
            <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –ø–∞—Ä—Ç–∏–∏</p>
          ) : (
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É</p>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
      <CharacterCreationModal
        isOpen={isCharacterCreationOpen}
        onClose={() => {
          console.log('Closing character creation modal')
          setIsCharacterCreationOpen(false)
        }}
        onCharacterCreate={(character) => {
          console.log('=== CHARACTER CREATION CALLBACK ===')
          console.log('Character received:', character)
          console.log('Callback type:', typeof handleCharacterCreate)
          
          try {
            console.log('Calling handleCharacterCreate...')
            handleCharacterCreate(character)
            console.log('handleCharacterCreate completed successfully')
          } catch (error) {
            console.error('=== CHARACTER CREATION CALLBACK ERROR ===')
            console.error('Error details:', error)
            console.error('Error stack:', error.stack)
            setIsSubmitting(false)
          }
        }}
        currentSession={currentSession || selectedSession}
      />
    </div>
  )
}

export default LoginScreen




