import React, { useState, useRef } from 'react'
import { uploadAvatar, getDefaultAvatar, getAvatarUrl } from '../utils/avatarManager'

const CharacterManager = ({ isOpen, onClose, characters = [], onCharactersChange, sessionId }) => {
  const [newCharacter, setNewCharacter] = useState({
    name: '',
    nickname: '',
    class: '',
    level: 1,
    race: '',
    description: ''
  })
  const [editingCharacter, setEditingCharacter] = useState(null)
  const [isUploading, setIsUploading] = useState(false)
  const [uploadError, setUploadError] = useState('')
  const fileInputRef = useRef(null)

  const characterClasses = [
    '–í–æ–∏–Ω', '–ü–∞–ª–∞–¥–∏–Ω', '–†–µ–π–Ω–¥–∂–µ—Ä', '–ë–∞—Ä–¥', '–í–æ–ª—à–µ–±–Ω–∏–∫', '–ß–∞—Ä–æ–¥–µ–π', 
    '–î—Ä—É–∏–¥', '–ñ—Ä–µ—Ü', '–ú–æ–Ω–∞—Ö', '–ü–ª—É—Ç', '–í–∞—Ä–≤–∞—Ä', '–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å'
  ]

  const characterRaces = [
    '–ß–µ–ª–æ–≤–µ–∫', '–≠–ª—å—Ñ', '–ü–æ–ª—É—ç–ª—å—Ñ', '–ü–æ–ª—É–æ—Ä–∫', '–ì–Ω–æ–º', '–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫',
    '–î–≤–∞—Ä—Ñ', '–¢–∏—Ñ–ª–∏–Ω–≥', '–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π', '–ì–µ–Ω–Ω–∞—Å–∏', '–ö–∞–ª–∏–∞—Å—Ç–∞—Ä'
  ]

  const handleCreateCharacter = () => {
    if (newCharacter.name.trim() && newCharacter.nickname.trim()) {
      const character = {
        ...newCharacter,
        id: Date.now().toString(),
        createdAt: new Date().toISOString(),
        avatar: null
      }
      
      onCharactersChange([...characters, character])
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setNewCharacter({
        name: '',
        nickname: '',
        class: '',
        level: 1,
        race: '',
        description: ''
      })
    }
  }

  const handleEditCharacter = (character) => {
    setEditingCharacter(character)
    setNewCharacter({
      name: character.name,
      nickname: character.nickname,
      class: character.class,
      level: character.level,
      race: character.race,
      description: character.description
    })
  }

  const handleSaveEdit = () => {
    if (editingCharacter && newCharacter.name.trim() && newCharacter.nickname.trim()) {
      const updatedCharacters = characters.map(char => 
        char.id === editingCharacter.id 
          ? { ...char, ...newCharacter, updatedAt: new Date().toISOString() }
          : char
      )
      
      onCharactersChange(updatedCharacters)
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setEditingCharacter(null)
      setNewCharacter({
        name: '',
        nickname: '',
        class: '',
        level: 1,
        race: '',
        description: ''
      })
    }
  }

  const handleCancelEdit = () => {
    setEditingCharacter(null)
    setNewCharacter({
      name: '',
      nickname: '',
      class: '',
      level: 1,
      race: '',
      description: ''
    })
  }

  const handleDeleteCharacter = (characterId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?')) {
      const updatedCharacters = characters.filter(char => char.id !== characterId)
      onCharactersChange(updatedCharacters)
    }
  }

  const handleAvatarUpload = async (characterId, file) => {
    setIsUploading(true)
    setUploadError('')
    
    try {
      const avatar = await uploadAvatar(file)
      
      const updatedCharacters = characters.map(char => 
        char.id === characterId 
          ? { ...char, avatar, updatedAt: new Date().toISOString() }
          : char
      )
      
      onCharactersChange(updatedCharacters)
    } catch (error) {
      setUploadError(error.message)
    } finally {
      setIsUploading(false)
    }
  }

  const handleRemoveAvatar = (characterId) => {
    const updatedCharacters = characters.map(char => 
      char.id === characterId 
        ? { ...char, avatar: null, updatedAt: new Date().toISOString() }
        : char
    )
    
    onCharactersChange(updatedCharacters)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 w-[800px] max-w-[90vw] max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-xl font-fantasy text-dnd-gold">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏</h3>
          <p className="text-sm text-gray-400 mt-2">
            –ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≥—Ä—É. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.
          </p>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white text-2xl"
          >
            √ó
          </button>
        </div>

        <div className="grid grid-cols-1 gap-6">
          {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
          {editingCharacter && (
            <div className="space-y-4">
              <h4 className="text-lg font-semibold text-dnd-gold">
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
              </h4>
            
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">
                  –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: *
                </label>
                <input
                  type="text"
                  value={newCharacter.name}
                  onChange={(e) => setNewCharacter(prev => ({ ...prev, name: e.target.value }))}
                  className="input-field w-full"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">
                  –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: *
                </label>
                <input
                  type="text"
                  value={newCharacter.nickname}
                  onChange={(e) => setNewCharacter(prev => ({ ...prev, nickname: e.target.value }))}
                  className="input-field w-full"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞..."
                />
              </div>
              
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    –ö–ª–∞—Å—Å:
                  </label>
                  <select
                    value={newCharacter.class}
                    onChange={(e) => setNewCharacter(prev => ({ ...prev, class: e.target.value }))}
                    className="input-field w-full"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å</option>
                    {characterClasses.map(charClass => (
                      <option key={charClass} value={charClass}>{charClass}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    –£—Ä–æ–≤–µ–Ω—å:
                  </label>
                  <input
                    type="number"
                    min="1"
                    max="20"
                    value={newCharacter.level}
                    onChange={(e) => setNewCharacter(prev => ({ ...prev, level: parseInt(e.target.value) || 1 }))}
                    className="input-field w-full"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">
                  –†–∞—Å–∞:
                </label>
                <select
                  value={newCharacter.race}
                  onChange={(e) => setNewCharacter(prev => ({ ...prev, race: e.target.value }))}
                  className="input-field w-full"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É</option>
                  {characterRaces.map(race => (
                    <option key={race} value={race}>{race}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">
                  –û–ø–∏—Å–∞–Ω–∏–µ:
                </label>
                <textarea
                  value={newCharacter.description}
                  onChange={(e) => setNewCharacter(prev => ({ ...prev, description: e.target.value }))}
                  className="input-field w-full h-20 resize-none"
                  placeholder="–û–ø–∏—à–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."
                />
              </div>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={handleSaveEdit}
                disabled={!newCharacter.name.trim() || !newCharacter.nickname.trim()}
                className="btn-primary flex-1 disabled:opacity-50"
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              <button
                onClick={handleCancelEdit}
                className="btn-secondary flex-1"
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
          )}

          {/* –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold text-dnd-gold">
              –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ ({characters.length})
            </h4>
            
            {characters.length === 0 ? (
              <div className="text-center text-gray-400 py-8">
                <div className="text-4xl mb-2">üë•</div>
                <p>–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</p>
                <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–ª–µ–≤–∞</p>
              </div>
            ) : (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {characters.map(character => (
                  <div
                    key={character.id}
                    className="bg-gray-700 rounded-lg p-4"
                  >
                    <div className="flex items-start space-x-3 mb-3">
                      {/* –ê–≤–∞—Ç–∞—Ä */}
                      <div className="relative">
                        <img
                          src={getAvatarUrl(character.avatar) || getDefaultAvatar(character.name)}
                          alt={character.name}
                          className="w-16 h-16 rounded-full object-cover border-2 border-gray-600"
                        />
                        
                        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–º */}
                        <div className="absolute -top-1 -right-1 space-y-1">
                          <button
                            onClick={() => fileInputRef.current?.click()}
                            className="bg-dnd-blue text-white p-1 rounded-full text-xs hover:bg-blue-600"
                            title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä"
                          >
                            üì∑
                          </button>
                          {character.avatar && (
                            <button
                              onClick={() => handleRemoveAvatar(character.id)}
                              className="bg-red-600 text-white p-1 rounded-full text-xs hover:bg-red-700"
                              title="–£–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä"
                            >
                              üóëÔ∏è
                            </button>
                          )}
                        </div>
                        
                        {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
                        <input
                          ref={fileInputRef}
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            if (e.target.files[0]) {
                              handleAvatarUpload(character.id, e.target.files[0])
                            }
                          }}
                          className="hidden"
                        />
                      </div>
                      
                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ */}
                      <div className="flex-1">
                        <h5 className="font-semibold text-white text-lg">{character.name}</h5>
                        <p className="text-sm text-gray-300">–ò–≥—Ä–æ–∫: {character.nickname}</p>
                        <div className="flex items-center space-x-2 mt-1">
                          {character.class && (
                            <span className="text-xs bg-dnd-blue text-white px-2 py-1 rounded">
                              {character.class} {character.level}
                            </span>
                          )}
                          {character.race && (
                            <span className="text-xs bg-dnd-green text-white px-2 py-1 rounded">
                              {character.race}
                            </span>
                          )}
                        </div>
                        {character.description && (
                          <p className="text-xs text-gray-400 mt-2">{character.description}</p>
                        )}
                      </div>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                    <div className="flex items-center justify-between">
                      <div className="text-xs text-gray-400">
                        –°–æ–∑–¥–∞–Ω: {new Date(character.createdAt).toLocaleDateString()}
                      </div>
                      
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEditCharacter(character)}
                          className="text-blue-400 hover:text-blue-300 text-sm"
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          onClick={() => handleDeleteCharacter(character.id)}
                          className="text-red-400 hover:text-red-300 text-sm"
                          title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {uploadError && (
          <div className="mt-4 p-3 bg-red-600 text-white rounded-lg">
            <p className="text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {uploadError}</p>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-6 border-t border-gray-600 pt-4">
          <div className="text-xs text-gray-400 space-y-1">
            <p>‚Ä¢ <strong>–ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏</strong> —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≥—Ä—É</p>
            <p>‚Ä¢ <strong>–ê–≤–∞—Ç–∞—Ä—ã</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –º–∏–Ω–∏–∞—Ç—é—Ä—ã</p>
            <p>‚Ä¢ <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã</strong>: JPEG, PNG, GIF, WebP (–¥–æ 5MB)</p>
            <p>‚Ä¢ <strong>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</strong> –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏</p>
            <p>‚Ä¢ <strong>–ê–≤–∞—Ç–∞—Ä—ã</strong> –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —Ñ–∏—à–∫–∞—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default CharacterManager
